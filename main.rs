use std::io;                // ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛рж░ ржЬржирзНржп
use rand::Rng;              // random рж╕ржВржЦрзНржпрж╛ ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп
use std::cmp::Ordering;     // рждрзБрж▓ржирж╛ ржХрж░рж╛рж░ ржЬржирзНржп enum: Less, Greater, Equal

fn main() {
    println!("Number Guessing Game ЁЯОп");
    println!("ржПржХржЯрж╛ рж╕ржВржЦрзНржпрж╛ ржЕржирзБржорж╛ржи ржХрж░рзЛ 1 ржерзЗржХрзЗ 100 ржПрж░ ржоржзрзНржпрзЗ!");

    // ржХржорзНржкрж┐ржЙржЯрж╛рж░ ржПржХржЯрж╛ random рж╕ржВржЦрзНржпрж╛ ржмрзЗржЫрзЗ ржирж┐ржЪрзНржЫрзЗ 1 ржерзЗржХрзЗ 100 ржПрж░ ржоржзрзНржпрзЗ
    let secret_number = rand::thread_rng().gen_range(1..=100);

    // ржПржЯрж╛ рж╢рзБржзрзБ ржЪрзЗржХ ржХрж░рж╛рж░ ржЬржирзНржп, ржЪрж╛ржЗрж▓рзЗ ржжрзЗржЦрждрзЗ ржкрж╛рж░рзЛ
    // println!("(Debug: Secret number is: {})", secret_number);

    loop {
        println!("\nржЖржкржирж╛рж░ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржи:");

        // ржирждрзБржи ржПржХржЯрж╛ ржЦрж╛рж▓рж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржмрж╛ржирж╛ржирзЛ рж╣рж▓рзЛ ржЗржиржкрзБржЯ рж░рж╛ржЦрж╛рж░ ржЬржирзНржп
        let mut guess = String::new();

        // ржЗржиржкрзБржЯ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
        io::stdin()
            .read_line(&mut guess)
            .expect("ржЗржиржкрзБржЯ ржирж┐рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!");

        // рж╕рзНржЯрзНрж░рж┐ржВржХрзЗ рж╕ржВржЦрзНржпрж╛ (u32) рждрзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░ржЫрж┐
        let guess: u32 = match guess.trim().parse() {
            Ok(num) => num,             // ржпржжрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛рж░рзНрж╕ рж╣рзЯ
            Err(_) => {
                println!("ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж╛ ржмрзИржз рж╕ржВржЦрзНржпрж╛ ржжрж┐ржи!");
                continue;               // ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рждрзЗ ржмрж▓ржЫрзЗ
            }
        };

        println!("ржЖржкржирж┐ ржЕржирзБржорж╛ржи ржХрж░рзЗржЫрзЗржи: {}", guess);

        // ржПржмрж╛рж░ рждрзБрж▓ржирж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        match guess.cmp(&secret_number) {
            Ordering::Less => println!("ржЦрзБржм ржЫрзЛржЯ! ЁЯУЙ"),
            Ordering::Greater => println!("ржЦрзБржм ржмржбрж╝! ЁЯУИ"),
            Ordering::Equal => {
                println!("ЁЯОЙ ржЖржкржирж┐ ржЬрж┐рждрзЗржЫрзЗржи! ЁЯОЙ");
                break; // рж▓рзБржк ржерж╛ржорж┐рзЯрзЗ ржжрж┐ржЪрзНржЫрзЗ ржХрж╛рж░ржг ржЖржкржирж┐ ржарж┐ржХ ржзрж░рзЗржЫрзЗржи
            }
        }
    }
}
